{"version":3,"sources":["components/Pages/Life/styles.module.scss","utils/array.js","utils/helpers.js","components/Pages/Life/Life.js"],"names":["module","exports","root","mainSvg","cell","controls","colorButton","activeColorButton","randomArrayElement","arr","Math","floor","random","length","aroundMatrix","result","y","x","push","generateAroundMatrix","countAround","_ref","matrix","width","height","aroundCount","aroundColors","forEach","_ref2","_ref3","Object","slicedToArray","yd","xd","ry","rx","color","get","mixColors","colors","count","Error","nums","shuffle","range","slice","COLORS","RED","GREEN","BLUE","Life","_React$Component","_getPrototypeOf2","_this","classCallCheck","this","_len","arguments","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","state","running","animate","newCellFrom","newCellTo","liveCellFrom","liveCellTo","activeColor","cells","fieldWidth","fieldHeight","cellSize","tickTimerId","drawing","drawCell","rect","svg","node","getBoundingClientRect","mx","d3","pageX","left","my","pageY","top","find","cy","cx","filter","_ref4","reDraw","prepareSvg","containerRef","append","attr","styles","on","button","e","preventDefault","force","Promise","resolve","reject","dataCells","selectAll","data","_ref5","_ref6","enter","merge","selection","d","exitCells","exit","remove","transition","duration","timerId","clearTimeout","setTimeout","tick","asyncToGenerator","regenerator_default","a","mark","_callee","_this$state","empty","emptyMatrix","resultCells","wrap","_context","prev","next","busy","abrupt","_ref8","_ref9","set","_ref10","_ref11","_ref12","_ref13","_ref14","_ref15","_countAround","_ref16","_ref17","_countAround3","_countAround4","stop","handleStart","setState","handleStop","handleRandomize","handleClean","handleDrawCross","centerY","centerX","handleChangeAnimate","_ref18","handleChangeRule","rule","currentTarget","name","defineProperty","Number","value","handleSelectColor","dataset","inherits","createClass","key","_this2","_this$state2","react_default","createElement","className","ref","i","onClick","disabled","type","id","checked","onChange","htmlFor","map","data-color","style","backgroundColor","cn","React","Component","defaultProps","connect","ownProps"],"mappings":"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","file":"static/js/8.9968884d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"styles_root__2LsGm\",\"mainSvg\":\"styles_mainSvg__3fS5G\",\"cell\":\"styles_cell__368Sr\",\"controls\":\"styles_controls__1NTIZ\",\"colorButton\":\"styles_colorButton__17HZt\",\"activeColorButton\":\"styles_activeColorButton__SXiBN\"};","import get from 'lodash/get';\n\nexport const randomArrayElement = arr => arr[Math.floor(Math.random() * arr.length)];\n\nconst generateAroundMatrix = () => {\n    const result = [];\n    for (let y = -1; y <= 1; y += 1) {\n        for (let x = -1; x <= 1; x += 1) {\n            if (!(x === 0 && y === 0)) {\n                result.push([y, x]);\n            }\n        }\n    }\n    return result;\n};\nexport const aroundMatrix = generateAroundMatrix();\n\nexport const countAround = ({ matrix, y, x, width, height }) => {\n    let aroundCount = 0;\n    const aroundColors = [];\n    aroundMatrix.forEach(([yd, xd]) => {\n        let ry = y + yd;\n        let rx = x + xd;\n\n        if (ry === -1) {\n            ry = height - 1;\n        }\n        if (ry === height) {\n            ry = 0;\n        }\n        if (rx === -1) {\n            rx = width - 1;\n        }\n        if (rx === width) {\n            rx = 0;\n        }\n\n        const color = get(matrix, [ry, rx]);\n        if (color) {\n            aroundCount += 1;\n            aroundColors.push(color);\n        }\n    });\n\n    return [aroundCount, aroundColors];\n};\n","/* eslint-disable prefer-template */\nimport shuffle from 'lodash/shuffle';\nimport range from 'lodash/range';\n\nexport function makeKey(x, y) {\n    return `${x}_${y}`;\n}\n\nexport function mixColors(colors) {\n    const count = colors.length;\n\n    if (!count) {\n        // ???\n        throw new Error('no colors??');\n    }\n\n    switch (count) {\n        case 1:\n            return colors[0];\n        case 2: {\n            const nums = shuffle(range(0, 2));\n            return '#' + colors[nums[0]].slice(1, 4) + colors[nums[1]].slice(4, 7);\n        }\n\n        case 3: {\n            const nums = shuffle(range(0, 3));\n            return '#' + colors[nums[0]].slice(1, 3) + colors[nums[1]].slice(3, 5) + colors[nums[2]].slice(5, 7);\n        }\n\n        case 4: {\n            const nums = shuffle(range(0, 4));\n            return (\n                '#' +\n                colors[nums[0]].slice(1, 3) +\n                colors[nums[1]].slice(3, 5) +\n                colors[nums[2]].slice(5, 6) +\n                colors[nums[3]].slice(6, 7)\n            );\n        }\n\n        case 5: {\n            const nums = shuffle(range(0, 5));\n            return (\n                '#' +\n                colors[nums[0]].slice(1, 3) +\n                colors[nums[1]].slice(3, 4) +\n                colors[nums[4]].slice(4, 5) +\n                colors[nums[2]].slice(5, 6) +\n                colors[nums[3]].slice(6, 7)\n            );\n        }\n\n        default: {\n            const nums = shuffle(range(0, 6));\n            return (\n                '#' +\n                colors[nums[0]].slice(1, 2) +\n                colors[nums[5]].slice(2, 3) +\n                colors[nums[1]].slice(3, 4) +\n                colors[nums[4]].slice(4, 5) +\n                colors[nums[2]].slice(5, 6) +\n                colors[nums[3]].slice(6, 7)\n            );\n        }\n    }\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport * as d3 from 'd3';\nimport PropTypes from 'prop-types';\nimport set from 'lodash/set';\nimport get from 'lodash/get';\nimport cn from 'clsx';\nimport styles from './styles.module.scss';\nimport { aroundMatrix, countAround, randomArrayElement } from '../../../utils/array';\nimport { mixColors } from '../../../utils/helpers';\n\nconst COLORS = {\n    RED: '#f55656',\n    GREEN: '#15b371',\n    BLUE: '#2b95d6',\n};\n\nexport class Life extends React.Component {\n    static propTypes = {\n        width: PropTypes.number,\n        height: PropTypes.number,\n        data: PropTypes.any,\n    };\n\n    static defaultProps = {\n        width: 500,\n        height: 500,\n    };\n\n    state = {\n        running: false,\n        animate: true,\n        newCellFrom: 3,\n        newCellTo: 3,\n        liveCellFrom: 2,\n        liveCellTo: 3,\n        activeColor: COLORS.RED,\n    };\n\n    cells = [];\n    fieldWidth = 51;\n    fieldHeight = 51;\n    cellSize = 5;\n    tickTimerId = null;\n    drawing = null;\n\n    drawCell = () => {\n        const { activeColor } = this.state;\n        const rect = this.svg.node().getBoundingClientRect();\n        const mx = d3.event.pageX - rect.left;\n        const my = d3.event.pageY - rect.top;\n        const x = Math.floor(mx / this.cellSize);\n        const y = Math.floor(my / this.cellSize);\n\n        if (this.drawing === 0) {\n            if (!this.cells.find(([cy, cx]) => x === cx && y === cy)) {\n                this.cells.push([y, x, activeColor]);\n            }\n        } else if (this.drawing === 2) {\n            this.cells = this.cells.filter(([cy, cx]) => !(cy === y && cx === x));\n        }\n\n        this.reDraw(true);\n    };\n\n    prepareSvg = () => {\n        this.svg = d3\n            .select(this.containerRef)\n            .append('svg')\n            .attr('class', styles.mainSvg)\n            .attr('width', this.fieldWidth * this.cellSize)\n            .attr('height', this.fieldHeight * this.cellSize);\n\n        this.svg\n            .on('mousedown', () => {\n                this.drawing = d3.event.button;\n                this.drawCell();\n            })\n            .on('mousemove', e => {\n                if (this.drawing !== null) {\n                    this.drawCell();\n                }\n            })\n            .on('mouseleave', e => {\n                this.drawing = null;\n            })\n            .on('mouseup', e => {\n                this.drawing = null;\n            })\n            .on('contextmenu', e => {\n                d3.event.preventDefault();\n                this.drawing = false;\n            });\n    };\n\n    reDraw = force =>\n        new Promise((resolve, reject) => {\n            const dataCells = this.svg.selectAll(`.${styles.cell}`).data(this.cells, ([y, x]) => `${y}_${x}`);\n\n            const processLiveCell = selection => {\n                selection\n                    .attr('class', styles.cell)\n                    .attr('x', d => d[1] * this.cellSize)\n                    .attr('y', d => d[0] * this.cellSize)\n                    .attr('width', this.cellSize)\n                    .attr('height', this.cellSize)\n                    .attr('fill', d => d[2]);\n            };\n\n            dataCells\n                .enter()\n                .append('rect')\n                .merge(dataCells)\n                .call(processLiveCell);\n\n            const exitCells = dataCells.exit();\n\n            if (force) {\n                exitCells.remove();\n                resolve();\n            } else if (this.state.animate) {\n                exitCells\n                    .attr('opacity', 0.9)\n                    .attr('fill', '#bfccd6')\n                    .transition()\n                    .duration(150)\n                    .attr('opacity', 0.0)\n                    .remove();\n\n                if (this.timerId) {\n                    clearTimeout(this.timerId);\n                }\n                this.timerId = setTimeout(resolve, 200);\n            } else {\n                exitCells.remove();\n\n                if (this.timerId) {\n                    clearTimeout(this.timerId);\n                }\n                this.timerId = setTimeout(resolve, 10);\n            }\n        });\n\n    // eslint-disable-next-line sonarjs/cognitive-complexity\n    tick = async () => {\n        if (this.busy) {\n            return;\n        }\n        const { newCellFrom, newCellTo, liveCellFrom, liveCellTo } = this.state;\n\n        this.busy = true;\n        const empty = [];\n        const matrix = [];\n        const emptyMatrix = [];\n        const resultCells = [];\n\n        this.cells.forEach(([y, x, color]) => {\n            set(matrix, [y, x], color);\n        });\n\n        // Generate empty cells array\n        this.cells.forEach(([y, x]) => {\n            aroundMatrix.forEach(([yd, xd]) => {\n                let ry = y + yd;\n                let rx = x + xd;\n\n                if (ry === -1) {\n                    ry = this.fieldHeight - 1;\n                }\n                if (ry === this.fieldHeight) {\n                    ry = 0;\n                }\n                if (rx === -1) {\n                    rx = this.fieldWidth - 1;\n                }\n                if (rx === this.fieldWidth) {\n                    rx = 0;\n                }\n\n                if (!get(matrix, [ry, rx]) && !get(emptyMatrix, [ry, rx])) {\n                    empty.push([ry, rx]);\n                    set(emptyMatrix, [ry, rx], 1);\n                }\n            });\n        });\n\n        this.cells.forEach(([y, x, color]) => {\n            const [aroundCount] = countAround({\n                matrix,\n                y,\n                x,\n                width: this.fieldWidth,\n                height: this.fieldHeight,\n            });\n\n            if (aroundCount >= liveCellFrom && aroundCount <= liveCellTo) {\n                // Stay alive\n                resultCells.push([y, x, color]);\n            }\n        });\n\n        empty.forEach(([y, x]) => {\n            const [aroundCount, aroundColors] = countAround({\n                matrix,\n                y,\n                x,\n                width: this.fieldWidth,\n                height: this.fieldHeight,\n            });\n\n            if (aroundCount >= newCellFrom && aroundCount <= newCellTo) {\n                // New life\n                resultCells.push([y, x, mixColors(aroundColors)]);\n            }\n        });\n\n        this.cells = resultCells;\n\n        await this.reDraw();\n\n        this.busy = false;\n\n        if (this.state.running) {\n            this.tick();\n        }\n    };\n\n    componentDidMount() {\n        this.prepareSvg();\n        this.handleRandomize();\n        // this.handleStart();\n    }\n\n    handleStart = () => {\n        this.setState({ running: true }, () => {\n            this.tick();\n        });\n    };\n\n    handleStop = () => {\n        if (this.state.running) {\n            this.setState({ running: false });\n        }\n    };\n\n    handleRandomize = () => {\n        this.cells = [];\n        for (let y = 0; y < this.fieldHeight; y += 1) {\n            for (let x = 0; x < this.fieldWidth; x += 1) {\n                if (Math.random() > 0.8) {\n                    this.cells.push([y, x, randomArrayElement([COLORS.RED, COLORS.GREEN, COLORS.BLUE])]);\n                }\n            }\n        }\n\n        // Glider\n        // this.cells = [[10, 10], [11, 11], [12, 11], [12, 10], [12, 9]];\n\n        this.reDraw(true);\n    };\n\n    handleClean = () => {\n        this.cells = [];\n        this.reDraw(true);\n    };\n\n    handleDrawCross = () => {\n        const centerY = Math.floor(this.fieldHeight / 2);\n        const centerX = Math.floor(this.fieldWidth / 2);\n\n        this.cells = [\n            [centerY + 1, centerX, COLORS.RED],\n            [centerY - 1, centerX, COLORS.RED],\n            [centerY, centerX + 1, COLORS.GREEN],\n            [centerY, centerX - 1, COLORS.GREEN],\n        ];\n        this.reDraw(true);\n    };\n\n    handleChangeAnimate = () => {\n        this.setState(({ animate }) => ({\n            animate: !animate,\n        }));\n    };\n\n    handleChangeRule = e => {\n        const rule = e.currentTarget.name;\n        this.setState({\n            [rule]: Number(e.currentTarget.value) || 0,\n        });\n    };\n\n    handleSelectColor = e => {\n        const { color } = e.currentTarget.dataset;\n        this.setState({\n            activeColor: color,\n        });\n    };\n\n    componentWillUnmount() {\n        this.handleStop();\n    }\n\n    render() {\n        const { running, animate, activeColor, newCellFrom, newCellTo, liveCellFrom, liveCellTo } = this.state;\n        return (\n            <div className={styles.root}>\n                <div\n                    ref={i => {\n                        this.containerRef = i;\n                    }}\n                />\n                <div className={styles.controls}>\n                    <button onClick={this.handleStart} disabled={running}>\n                        Start\n                    </button>\n                    <button onClick={this.handleStop} disabled={!running}>\n                        Stop\n                    </button>\n                    <button onClick={this.handleRandomize}>Randomize</button>\n                    <button onClick={this.handleClean}>Clean</button>\n                    <button onClick={this.handleDrawCross}>Draw center cross</button>\n                    <button onClick={this.tick}>Tick</button>\n                </div>\n\n                <div className={styles.controls}>\n                    <input type=\"checkbox\" id=\"animate\" checked={animate} onChange={this.handleChangeAnimate} />\n                    <label htmlFor=\"animate\">Animate destruction</label>\n                </div>\n                <div className={styles.controls}>\n                    NewCell:&nbsp; &gt;=\n                    <input\n                        type=\"text\"\n                        name=\"newCellFrom\"\n                        onChange={this.handleChangeRule}\n                        value={newCellFrom}\n                        disabled={running}\n                    />\n                    &nbsp; &lt;=\n                    <input\n                        type=\"text\"\n                        name=\"newCellTo\"\n                        onChange={this.handleChangeRule}\n                        value={newCellTo}\n                        disabled={running}\n                    />\n                </div>\n                <div className={styles.controls}>\n                    LiveCell:&nbsp; &gt;=\n                    <input\n                        type=\"text\"\n                        name=\"liveCellFrom\"\n                        onChange={this.handleChangeRule}\n                        value={liveCellFrom}\n                        disabled={running}\n                    />\n                    &nbsp; &lt;=\n                    <input\n                        type=\"text\"\n                        name=\"liveCellTo\"\n                        onChange={this.handleChangeRule}\n                        value={liveCellTo}\n                        disabled={running}\n                    />\n                </div>\n                <div className={styles.controls}>\n                    {[COLORS.RED, COLORS.GREEN, COLORS.BLUE].map(color => (\n                        <div\n                            key={color}\n                            data-color={color}\n                            onClick={this.handleSelectColor}\n                            style={{ backgroundColor: color }}\n                            className={cn(styles.colorButton, {\n                                [styles.activeColorButton]: activeColor === color,\n                            })}\n                        />\n                    ))}\n                </div>\n            </div>\n        );\n    }\n}\n\nfunction mapStateToProps(state, ownProps) {\n    return {};\n}\n\nexport default connect(\n    mapStateToProps,\n    {},\n)(Life);\n"],"sourceRoot":""}