{"version":3,"sources":["components/Pages/GeoMap/GeoMap.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator/index.js","../node_modules/regenerator-runtime/runtime-module.js","../node_modules/regenerator-runtime/runtime.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"names":["GeoMap","_React$Component","_getPrototypeOf2","_this","Object","_home_travis_build_avin_d3_sandbox_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__","this","_len","arguments","length","args","Array","_key","_home_travis_build_avin_d3_sandbox_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__","_home_travis_build_avin_d3_sandbox_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__","call","apply","concat","scale","center","draw","_home_travis_build_avin_d3_sandbox_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__","_home_travis_build_avin_d3_sandbox_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","a","mark","_callee","proj","wrap","_context","prev","next","svg","d3","containerRef","append","attr","style","on","e","preventDefault","wheelDelta","Math","min","max","redraw","fetch","then","d","json","world","sent","sc","selectAll","data","features","enter","projection","i","stop","_home_travis_build_avin_d3_sandbox_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_6__","_home_travis_build_avin_d3_sandbox_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__","key","value","_this2","react__WEBPACK_IMPORTED_MODULE_7___default","createElement","ref","React","Component","connect","state","ownProps","module","exports","__webpack_require__","g","self","Function","hadRuntime","regeneratorRuntime","getOwnPropertyNames","indexOf","oldRuntime","undefined","global","Op","prototype","hasOwn","hasOwnProperty","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","inModule","runtime","GenStateSuspendedStart","GenStateSuspendedYield","GenStateExecuting","GenStateCompleted","ContinueSentinel","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","GeneratorFunctionPrototype","Generator","create","GeneratorFunction","constructor","displayName","isGeneratorFunction","genFun","ctor","name","setPrototypeOf","__proto__","awrap","arg","__await","defineIteratorMethods","AsyncIterator","async","innerFn","outerFn","tryLocsList","iter","result","done","toString","keys","object","push","reverse","pop","Context","reset","skipTempReset","_sent","delegate","method","tryEntries","forEach","resetTryEntry","charAt","isNaN","slice","rootRecord","completion","type","rval","dispatchException","exception","context","handle","loc","caught","record","entry","tryLoc","hasCatch","hasFinally","catchLoc","finallyLoc","Error","abrupt","finallyEntry","complete","afterLoc","finish","catch","thrown","delegateYield","iterable","resultName","nextLoc","protoGenerator","generator","_invoke","doneResult","delegateResult","maybeInvokeDelegate","tryCatch","makeInvokeMethod","fn","obj","err","previousPromise","callInvokeWithMethodAndArg","Promise","resolve","reject","invoke","unwrapped","error","return","TypeError","info","pushTryEntry","locs","iteratorMethod","asyncGeneratorStep","gen","_next","_throw","_asyncToGenerator","__webpack_exports__"],"mappings":"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","file":"static/js/10.f79ff4e5.chunk.js","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport * as d3 from 'd3';\n\nexport class GeoMap extends React.Component {\n    scale = 150;\n    center = [8, 1];\n\n    draw = async () => {\n        this.svg = d3\n            .select(this.containerRef)\n            .append('svg')\n            .attr('width', 800)\n            .attr('height', 500)\n            .style('border', '1px solid black')\n            .style('margin', '10px');\n\n        this.svg.on('mousewheel', () => {\n            const e = d3.event;\n            e.preventDefault();\n            if (e.wheelDelta > 0) {\n                this.scale = Math.min(2500, this.scale + this.scale / 10);\n            } else {\n                this.scale = Math.max(50, this.scale - this.scale / 10);\n            }\n            this.redraw();\n        });\n\n        const proj = d3\n            .geoEquirectangular()\n            .center(this.center)\n            .scale(this.scale);\n\n        this.world = await fetch('data/countries.geo.json').then(d => d.json());\n\n        this.sc = d3.scaleOrdinal(d3.schemeSet3);\n\n        this.svg\n            .selectAll('path')\n            .data(this.world.features)\n            .enter()\n            .append('path')\n            .attr('d', d3.geoPath().projection(proj))\n            .attr('fill', (d, i) => this.sc(i));\n    };\n\n    redraw = () => {\n        const proj = d3\n            .geoEquirectangular()\n            .center(this.center)\n            .scale(this.scale);\n\n        this.svg\n            .selectAll('path')\n            .data(this.world.features)\n            .attr('d', d3.geoPath().projection(proj))\n            .attr('fill', (d, i) => this.sc(i));\n    };\n\n    componentDidMount() {\n        this.draw();\n    }\n\n    render() {\n        return (\n            <div\n                ref={i => {\n                    this.containerRef = i;\n                }}\n            />\n        );\n    }\n}\n\nfunction mapStateToProps(state, ownProps) {\n    return {};\n}\n\nexport default connect(\n    mapStateToProps,\n    {},\n)(GeoMap);\n","module.exports = require(\"regenerator-runtime\");\n","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n// This method of obtaining a reference to the global object needs to be\n// kept identical to the way it is obtained in runtime.js\nvar g = function () {\n  return this || typeof self === \"object\" && self;\n}() || Function(\"return this\")(); // Use `getOwnPropertyNames` because not all browsers support calling\n// `hasOwnProperty` on the global `self` object in a worker. See #183.\n\n\nvar hadRuntime = g.regeneratorRuntime && Object.getOwnPropertyNames(g).indexOf(\"regeneratorRuntime\") >= 0; // Save the old regeneratorRuntime in case it needs to be restored later.\n\nvar oldRuntime = hadRuntime && g.regeneratorRuntime; // Force reevalutation of runtime.js.\n\ng.regeneratorRuntime = undefined;\nmodule.exports = require(\"./runtime\");\n\nif (hadRuntime) {\n  // Restore the original runtime.\n  g.regeneratorRuntime = oldRuntime;\n} else {\n  // Remove the global property added by runtime.js.\n  try {\n    delete g.regeneratorRuntime;\n  } catch (e) {\n    g.regeneratorRuntime = undefined;\n  }\n}","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n!function (global) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n  var inModule = typeof module === \"object\";\n  var runtime = global.regeneratorRuntime;\n\n  if (runtime) {\n    if (inModule) {\n      // If regeneratorRuntime is defined globally and we're in a module,\n      // make the exports object identical to regeneratorRuntime.\n      module.exports = runtime;\n    } // Don't bother evaluating the rest of this file if the runtime was\n    // already defined globally.\n\n\n    return;\n  } // Define the runtime globally (as expected by generated code) as either\n  // module.exports (if we're in a module) or a new, empty object.\n\n\n  runtime = global.regeneratorRuntime = inModule ? module.exports : {};\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []); // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n    return generator;\n  }\n\n  runtime.wrap = wrap; // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n\n  function tryCatch(fn, obj, arg) {\n    try {\n      return {\n        type: \"normal\",\n        arg: fn.call(obj, arg)\n      };\n    } catch (err) {\n      return {\n        type: \"throw\",\n        arg: err\n      };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\"; // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n\n  var ContinueSentinel = {}; // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n\n  function Generator() {}\n\n  function GeneratorFunction() {}\n\n  function GeneratorFunctionPrototype() {} // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n\n\n  var IteratorPrototype = {};\n\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n\n  if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] = GeneratorFunction.displayName = \"GeneratorFunction\"; // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function (method) {\n      prototype[method] = function (arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  runtime.isGeneratorFunction = function (genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can\n    // do is to check its .name property.\n    (ctor.displayName || ctor.name) === \"GeneratorFunction\" : false;\n  };\n\n  runtime.mark = function (genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  }; // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n\n\n  runtime.awrap = function (arg) {\n    return {\n      __await: arg\n    };\n  };\n\n  function AsyncIterator(generator) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n\n        if (value && typeof value === \"object\" && hasOwn.call(value, \"__await\")) {\n          return Promise.resolve(value.__await).then(function (value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function (err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return Promise.resolve(value).then(function (unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function (error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new Promise(function (resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise = // If enqueue has been called before, then we want to wait until\n      // all previous Promises have been resolved before calling invoke,\n      // so that results are always delivered in the correct order. If\n      // enqueue has not been called before, then it is important to\n      // call invoke immediately, without waiting on a callback to fire,\n      // so that the async generator function has the opportunity to do\n      // any necessary setup in a predictable way. This predictability\n      // is why the Promise constructor synchronously invokes its\n      // executor callback, and why async functions synchronously\n      // execute code before the first await. Since we implement simple\n      // async functions in terms of async generators, it is especially\n      // important to get this right, even though it requires care.\n      previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // Avoid propagating failures to Promises returned by later\n      // invocations of the iterator.\n      callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();\n    } // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n\n\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n\n  runtime.AsyncIterator = AsyncIterator; // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n\n  runtime.async = function (innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList));\n    return runtime.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.\n    : iter.next().then(function (result) {\n      return result.done ? result.value : iter.next();\n    });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        } // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n\n\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n        var record = tryCatch(innerFn, self, context);\n\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done ? GenStateCompleted : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted; // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  } // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n\n\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        if (delegate.iterator.return) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (!info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value; // Resume execution at the desired location (see delegateYield).\n\n      context.next = delegate.nextLoc; // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    } // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n\n\n    context.delegate = null;\n    return ContinueSentinel;\n  } // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n\n\n  defineIteratorMethods(Gp);\n  Gp[toStringTagSymbol] = \"Generator\"; // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n\n  Gp[iteratorSymbol] = function () {\n    return this;\n  };\n\n  Gp.toString = function () {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = {\n      tryLoc: locs[0]\n    };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{\n      tryLoc: \"root\"\n    }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  runtime.keys = function (object) {\n    var keys = [];\n\n    for (var key in object) {\n      keys.push(key);\n    }\n\n    keys.reverse(); // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      } // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n\n\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1,\n            next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n          return next;\n        };\n\n        return next.next = next;\n      }\n    } // Return an iterator with no values.\n\n\n    return {\n      next: doneResult\n    };\n  }\n\n  runtime.values = values;\n\n  function doneResult() {\n    return {\n      value: undefined,\n      done: true\n    };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n    reset: function reset(skipTempReset) {\n      this.prev = 0;\n      this.next = 0; // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n      this.method = \"next\";\n      this.arg = undefined;\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n    stop: function stop() {\n      this.done = true;\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n    dispatchException: function dispatchException(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !!caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n    abrupt: function abrupt(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n\n        if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry && (type === \"break\" || type === \"continue\") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n    complete: function complete(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" || record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n    finish: function finish(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n    \"catch\": function _catch(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n\n          return thrown;\n        }\n      } // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n\n\n      throw new Error(\"illegal catch attempt\");\n    },\n    delegateYield: function delegateYield(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n}( // In sloppy mode, unbound `this` refers to the global object, fallback to\n// Function constructor if we're in global strict mode. That is sadly a form\n// of indirect eval which violates Content Security Policy.\nfunction () {\n  return this || typeof self === \"object\" && self;\n}() || Function(\"return this\")());","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}"],"sourceRoot":""}